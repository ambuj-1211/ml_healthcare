{"ast":null,"code":"var _jsxFileName = \"/home/ambuj/projects/ml_healthcare/src/components/ServicePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import {\n//   MainContainer,\n//   ChatContainer,\n//   MessageList,\n//   Message,\n//   MessageInput,\n//   TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// // 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\n// const ServicePage = () => {\n//     const [messages, setMessages] = useState([\n//       {\n//         message: \"Hello, I'm your virtual doctor! Ask me anything!\",\n//         sentTime: \"just now\",\n//         sender: \"Your Virtual Doctor\",\n//       },\n//     ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//     const handleSendRequest = async (message) => {\n//       const newMessage = {\n//         message,\n//         direction: 'outgoing',\n//         sender: \"user\",\n//       };\n\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       setIsTyping(true);\n//       try {\n//         const response = await processMessageToChatGPT([...messages, newMessage]);\n//         const content = response.choices[0]?.message?.content;\n//         if (content) {\n//           const chatGPTResponse = {\n//             message: content,\n//             sender: \"Your Virtual Doctor\",\n//           };\n//           setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//         }\n//       } catch (error) {\n//         console.error(\"Error processing message:\", error);\n//       } finally {\n//         setIsTyping(false);\n//       }\n//     };\n\n//     async function processMessageToChatGPT(chatMessages) {\n//       const apiMessages = chatMessages.map((messageObject) => {\n//         const role = messageObject.sender === \"Your Virtual Doctor\" ? \"assistant\" : \"user\";\n//         return { role, content: messageObject.message };\n//       });\n\n//       const apiRequestBody = {\n//         \"model\": \"gpt-3.5-turbo\",\n//         \"messages\": [\n//           { role: \"system\", content: \"I'm a Student using ChatGPT for my project which is based on healthcare\" },\n//           ...apiMessages,\n//         ],\n//       };\n\n//       const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Authorization\": \"Bearer \" + \"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\",\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(apiRequestBody),\n//       });\n\n//       return response.json();\n//     }\n\n//     return (\n//       <div className=\"ServicePage\">\n//         <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//           <MainContainer>\n//             <ChatContainer>       \n//               <MessageList \n//                 scrollBehavior=\"smooth\" \n//                 typingIndicator={isTyping ? <TypingIndicator content=\"generating the feedback\" /> : null}\n//               >\n//                 {messages.map((message, i) => {\n//                   console.log(message)\n//                   return <Message key={i} model={message} />\n//                 })}\n//               </MessageList>\n//               <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//             </ChatContainer>\n//           </MainContainer>\n//         </div>\n//       </div>\n//     )\n//   }\n// export default ServicePage;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ServicePage = () => {\n  _s();\n  const container = useRef(null);\n  useEffect(() => {\n    lottie.loadAnimation({\n      container: container.current,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n      animationData: require('../assets/Checkup.json')\n    });\n  }, []);\n  const [symptom, setSymptom] = useState('');\n  const [disease, setDisease] = useState('');\n  const handleInputChange = e => {\n    setSymptom(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:5000/predict', {\n        symptom: symptom\n      });\n      setDisease(response.data.prediction);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: `${layout.section}  p-32 mt-16`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: layout.sectionInfo,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: styles.heading2,\n          children: [\"Time for \", /*#__PURE__*/_jsxDEV(\"br\", {\n            className: \"sm:block hidden\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"flex-1 font-poppins font-semibold ss:text-[72px] text-[52px] text-custom ss:leading-[90px] leading-[70px]\",\n            children: \"Checkup!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${styles.paragraph} max-w-[470px] mt-5 ml-2`,\n          children: \"Picture a world where healthcare is a breeze. Our disease prediction website, bringing dreams to life, blends advanced tech with an easy-to-use interface. It lets you share symptoms effortlessly and offers accurate health insights.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: container,\n        className: `flex-1 flex ${styles.flexCenter} md:my-0 my-10 relative w-[400px] h-[400px]`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"pt-12 flex flex-col w-1/2 mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Enter the symptoms\",\n        type: \"text\",\n        value: symptom,\n        onChange: handleInputChange,\n        className: \"h-12 px-4 mb-8 rounded-md border border-gray-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"mb-8 bg-black-500 text-black py-2 px-4 rounded-md shadow-md hover:bg-black-600 focus:outline-none focus:ring-2 focus:ring-black-500\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), disease && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `bg-gray-200 rounded-md p-4 mx-auto w-1/2 h-32 mb-16`,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Result: \", disease]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n// import {\n//     ChatContainer,\n//     MainContainer,\n//     Message,\n//     MessageInput,\n//     MessageList,\n//     TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import { useState } from 'react';\n// import './App.css';\n\n// const API_KEY =\"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\"\n\n// const ServicePage = () => {\n//   const [messages, setMessages] = useState([\n//     {\n//       message: \"Hello, I'm ChatGPT! Ask me anything!\",\n//       sentTime: \"just now\",\n//       sender: \"ChatGPT\",\n//     },\n//   ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//   const handleSendRequest = async (message) => {\n//     const newMessage = {\n//       message,\n//       direction: 'outgoing',\n//       sender: \"user\",\n//     };\n\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await processMessageToChatGPT([...messages, newMessage]);\n//       const content = response.choices[0]?.message?.content;\n//       if (content) {\n//         const chatGPTResponse = {\n//           message: content,\n//           sender: \"ChatGPT\",\n//         };\n//         setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error processing message:\", error);\n//     } finally {\n//       setIsTyping(false);\n//     }\n//   };\n\n//   async function processMessageToChatGPT(chatMessages) {\n//     const apiMessages = chatMessages.map((messageObject) => {\n//       const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n//       return { role, content: messageObject.message };\n//     });\n\n//     const apiRequestBody = {\n//       \"model\": \"gpt-3.5-turbo\",\n//       \"messages\": [\n//         { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n//         ...apiMessages,\n//       ],\n//     };\n\n//     const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Authorization\": \"Bearer \" + API_KEY,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(apiRequestBody),\n//     });\n\n//     return response.json();\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//         <MainContainer>\n//           <ChatContainer>       \n//             <MessageList \n//               scrollBehavior=\"smooth\" \n//               typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n//             >\n//               {messages.map((message, i) => {\n//                 console.log(message)\n//                 return <Message key={i} model={message} />\n//               })}\n//             </MessageList>\n//             <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//           </ChatContainer>\n//         </MainContainer>\n//       </div>\n//     </div>\n//   )\n// }\n_s(ServicePage, \"nUe3lqf5dGoPJaRvlSyoL6y+J4s=\");\n_c = ServicePage;\nexport default ServicePage;\nvar _c;\n$RefreshReg$(_c, \"ServicePage\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ServicePage","_s","container","useRef","useEffect","lottie","loadAnimation","current","renderer","loop","autoplay","animationData","require","symptom","setSymptom","disease","setDisease","handleInputChange","e","target","value","handleSubmit","preventDefault","response","axios","post","data","prediction","error","console","children","className","layout","section","sectionInfo","styles","heading2","fileName","_jsxFileName","lineNumber","columnNumber","paragraph","ref","flexCenter","onSubmit","placeholder","type","onChange","_c","$RefreshReg$"],"sources":["/home/ambuj/projects/ml_healthcare/src/components/ServicePage.js"],"sourcesContent":["import React, { useState } from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import {\n//   MainContainer,\n//   ChatContainer,\n//   MessageList,\n//   Message,\n//   MessageInput,\n//   TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// // 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\n// const ServicePage = () => {\n//     const [messages, setMessages] = useState([\n//       {\n//         message: \"Hello, I'm your virtual doctor! Ask me anything!\",\n//         sentTime: \"just now\",\n//         sender: \"Your Virtual Doctor\",\n//       },\n//     ]);\n//   const [isTyping, setIsTyping] = useState(false);\n  \n//     const handleSendRequest = async (message) => {\n//       const newMessage = {\n//         message,\n//         direction: 'outgoing',\n//         sender: \"user\",\n//       };\n  \n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       setIsTyping(true);\n//       try {\n//         const response = await processMessageToChatGPT([...messages, newMessage]);\n//         const content = response.choices[0]?.message?.content;\n//         if (content) {\n//           const chatGPTResponse = {\n//             message: content,\n//             sender: \"Your Virtual Doctor\",\n//           };\n//           setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//         }\n//       } catch (error) {\n//         console.error(\"Error processing message:\", error);\n//       } finally {\n//         setIsTyping(false);\n//       }\n//     };\n  \n//     async function processMessageToChatGPT(chatMessages) {\n//       const apiMessages = chatMessages.map((messageObject) => {\n//         const role = messageObject.sender === \"Your Virtual Doctor\" ? \"assistant\" : \"user\";\n//         return { role, content: messageObject.message };\n//       });\n  \n//       const apiRequestBody = {\n//         \"model\": \"gpt-3.5-turbo\",\n//         \"messages\": [\n//           { role: \"system\", content: \"I'm a Student using ChatGPT for my project which is based on healthcare\" },\n//           ...apiMessages,\n//         ],\n//       };\n  \n//       const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Authorization\": \"Bearer \" + \"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\",\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(apiRequestBody),\n//       });\n  \n//       return response.json();\n//     }\n  \n//     return (\n//       <div className=\"ServicePage\">\n//         <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//           <MainContainer>\n//             <ChatContainer>       \n//               <MessageList \n//                 scrollBehavior=\"smooth\" \n//                 typingIndicator={isTyping ? <TypingIndicator content=\"generating the feedback\" /> : null}\n//               >\n//                 {messages.map((message, i) => {\n//                   console.log(message)\n//                   return <Message key={i} model={message} />\n//                 })}\n//               </MessageList>\n//               <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//             </ChatContainer>\n//           </MainContainer>\n//         </div>\n//       </div>\n//     )\n//   }\n// export default ServicePage;\nconst ServicePage = () => {\n\n    const container = useRef(null)\n\n    useEffect(() => {\n        lottie.loadAnimation({\n            container: container.current,\n            renderer: 'svg',\n            loop: true,\n            autoplay: true,\n            animationData: require('../assets/Checkup.json')\n        })\n    }, [])\n\n    const [symptom, setSymptom] = useState('');\n    const [disease, setDisease] = useState('');\n\n    const handleInputChange = (e) => {\n        setSymptom(e.target.value);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            const response = await axios.post('http://localhost:5000/predict', {\n                symptom: symptom,\n            });\n\n            \n            setDisease(response.data.prediction);\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    \n\n    return (\n        <>\n            <section className={`${layout.section}  p-32 mt-16`}>\n                <div className={layout.sectionInfo}>\n                    <h2 className={styles.heading2}>\n                        Time for <br className=\"sm:block hidden\" />\n                        <p className=\"flex-1 font-poppins font-semibold ss:text-[72px] text-[52px] text-custom ss:leading-[90px] leading-[70px]\">\n                            Checkup!!\n                        </p>\n                    </h2>\n                    <p className={`${styles.paragraph} max-w-[470px] mt-5 ml-2`}>\n                        Picture a world where healthcare is a breeze. Our disease prediction website, bringing dreams to life, blends advanced tech with an easy-to-use interface. It lets you share symptoms effortlessly and offers accurate health insights.\n                    </p>\n                </div>\n\n            <div ref={container} className={`flex-1 flex ${styles.flexCenter} md:my-0 my-10 relative w-[400px] h-[400px]`}></div>\n\n        </section>\n\n            <form onSubmit={handleSubmit} className=\"pt-12 flex flex-col w-1/2 mx-auto\">\n                <input\n                    placeholder=\"Enter the symptoms\"\n                    type=\"text\"\n                    value={symptom}\n                    onChange={handleInputChange}\n                    className=\"h-12 px-4 mb-8 rounded-md border border-gray-600\"\n                />\n\n                <button\n                    type=\"submit\"\n                    className=\"mb-8 bg-black-500 text-black py-2 px-4 rounded-md shadow-md hover:bg-black-600 focus:outline-none focus:ring-2 focus:ring-black-500\"\n                >\n                    Submit\n                </button>\n            {disease &&  <div className=\"text-center\">\n                    <div className={`bg-gray-200 rounded-md p-4 mx-auto w-1/2 h-32 mb-16`}>\n                        <p>Result: {disease}</p>\n                    </div>\n                </div>}\n            </form>\n            </>\n    );\n}\n\n\n\n// import {\n//     ChatContainer,\n//     MainContainer,\n//     Message,\n//     MessageInput,\n//     MessageList,\n//     TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import { useState } from 'react';\n// import './App.css';\n\n// const API_KEY =\"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\"\n\n// const ServicePage = () => {\n//   const [messages, setMessages] = useState([\n//     {\n//       message: \"Hello, I'm ChatGPT! Ask me anything!\",\n//       sentTime: \"just now\",\n//       sender: \"ChatGPT\",\n//     },\n//   ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//   const handleSendRequest = async (message) => {\n//     const newMessage = {\n//       message,\n//       direction: 'outgoing',\n//       sender: \"user\",\n//     };\n\n//     setMessages((prevMessages) => [...prevMessages, newMessage]);\n//     setIsTyping(true);\n\n//     try {\n//       const response = await processMessageToChatGPT([...messages, newMessage]);\n//       const content = response.choices[0]?.message?.content;\n//       if (content) {\n//         const chatGPTResponse = {\n//           message: content,\n//           sender: \"ChatGPT\",\n//         };\n//         setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//       }\n//     } catch (error) {\n//       console.error(\"Error processing message:\", error);\n//     } finally {\n//       setIsTyping(false);\n//     }\n//   };\n\n//   async function processMessageToChatGPT(chatMessages) {\n//     const apiMessages = chatMessages.map((messageObject) => {\n//       const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n//       return { role, content: messageObject.message };\n//     });\n\n//     const apiRequestBody = {\n//       \"model\": \"gpt-3.5-turbo\",\n//       \"messages\": [\n//         { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n//         ...apiMessages,\n//       ],\n//     };\n\n//     const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Authorization\": \"Bearer \" + API_KEY,\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify(apiRequestBody),\n//     });\n\n//     return response.json();\n//   }\n\n//   return (\n//     <div className=\"App\">\n//       <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//         <MainContainer>\n//           <ChatContainer>       \n//             <MessageList \n//               scrollBehavior=\"smooth\" \n//               typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n//             >\n//               {messages.map((message, i) => {\n//                 console.log(message)\n//                 return <Message key={i} model={message} />\n//               })}\n//             </MessageList>\n//             <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//           </ChatContainer>\n//         </MainContainer>\n//       </div>\n//     </div>\n//   )\n// }\n\nexport default ServicePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}