{"ast":null,"code":"var _jsxFileName = \"/home/ambuj/projects/ml_healthcare/src/components/ServicePage.js\",\n  _s = $RefreshSig$();\n// import React, { useState,useEffect } from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import {\n//   MainContainer,\n//   ChatContainer,\n//   MessageList,\n//   Message,\n//   MessageInput,\n//   TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// // 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\n// const ServicePage = () => {\n//     const [messages, setMessages] = useState([\n//       {\n//         message: \"Hello, I'm your virtual doctor! Ask me anything!\",\n//         sentTime: \"just now\",\n//         sender: \"Your Virtual Doctor\",\n//       },\n//     ]);\n//   const [isTyping, setIsTyping] = useState(false);\n\n//     const handleSendRequest = async (message) => {\n//       const newMessage = {\n//         message,\n//         direction: 'outgoing',\n//         sender: \"user\",\n//       };\n\n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       setIsTyping(true);\n//       try {\n//         const response = await processMessageToChatGPT([...messages, newMessage]);\n//         const content = response.choices[0]?.message?.content;\n//         if (content) {\n//           const chatGPTResponse = {\n//             message: content,\n//             sender: \"Your Virtual Doctor\",\n//           };\n//           setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//         }\n//       } catch (error) {\n//         console.error(\"Error processing message:\", error);\n//       } finally {\n//         setIsTyping(false);\n//       }\n//     };\n\n//     async function processMessageToChatGPT(chatMessages) {\n//       const apiMessages = chatMessages.map((messageObject) => {\n//         const role = messageObject.sender === \"Your Virtual Doctor\" ? \"assistant\" : \"user\";\n//         return { role, content: messageObject.message };\n//       });\n\n//       const apiRequestBody = {\n//         \"model\": \"gpt-3.5-turbo\",\n//         \"messages\": [\n//           { role: \"system\", content: \"I'm a Student using ChatGPT for my project which is based on healthcare\" },\n//           ...apiMessages,\n//         ],\n//       };\n\n//       const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Authorization\": \"Bearer \" + \"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\",\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(apiRequestBody),\n//       });\n\n//       return response.json();\n//     }\n\n//     return (\n//       <div className=\"ServicePage\">\n//         <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//           <MainContainer>\n//             <ChatContainer>       \n//               <MessageList \n//                 scrollBehavior=\"smooth\" \n//                 typingIndicator={isTyping ? <TypingIndicator content=\"generating the feedback\" /> : null}\n//               >\n//                 {messages.map((message, i) => {\n//                   console.log(message)\n//                   return <Message key={i} model={message} />\n//                 })}\n//               </MessageList>\n//               <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//             </ChatContainer>\n//           </MainContainer>\n//         </div>\n//       </div>\n//     )\n//   }\n// export default ServicePage;\n// const ServicePage = () => {\n\n//     const container = useRef(null)\n\n//     useEffect(() => {\n//         lottie.loadAnimation({\n//             container: container.current,\n//             renderer: 'svg',\n//             loop: true,\n//             autoplay: true,\n//             animationData: require('../assets/Checkup.json')\n//         })\n//     }, [])\n\n//     const [symptom, setSymptom] = useState('');\n//     const [disease, setDisease] = useState('');\n\n//     const handleInputChange = (e) => {\n//         setSymptom(e.target.value);\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         try {\n//             const response = await axios.post('http://localhost:5000/predict', {\n//                 symptom: symptom,\n//             });\n\n//             setDisease(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n\n//     return (\n//         <>\n//             <section className={`${layout.section}  p-32 mt-16`}>\n//                 <div className={layout.sectionInfo}>\n//                     <h2 className={styles.heading2}>\n//                         Time for <br className=\"sm:block hidden\" />\n//                         <p className=\"flex-1 font-poppins font-semibold ss:text-[72px] text-[52px] text-custom ss:leading-[90px] leading-[70px]\">\n//                             Checkup!!\n//                         </p>\n//                     </h2>\n//                     <p className={`${styles.paragraph} max-w-[470px] mt-5 ml-2`}>\n//                         Picture a world where healthcare is a breeze. Our disease prediction website, bringing dreams to life, blends advanced tech with an easy-to-use interface. It lets you share symptoms effortlessly and offers accurate health insights.\n//                     </p>\n//                 </div>\n\n//             <div ref={container} className={`flex-1 flex ${styles.flexCenter} md:my-0 my-10 relative w-[400px] h-[400px]`}></div>\n\n//         </section>\n\n//             <form onSubmit={handleSubmit} className=\"pt-12 flex flex-col w-1/2 mx-auto\">\n//                 <input\n//                     placeholder=\"Enter the symptoms\"\n//                     type=\"text\"\n//                     value={symptom}\n//                     onChange={handleInputChange}\n//                     className=\"h-12 px-4 mb-8 rounded-md border border-gray-600\"\n//                 />\n\n//                 <button\n//                     type=\"submit\"\n//                     className=\"mb-8 bg-black-500 text-black py-2 px-4 rounded-md shadow-md hover:bg-black-600 focus:outline-none focus:ring-2 focus:ring-black-500\"\n//                 >\n//                     Submit\n//                 </button>\n//             {disease &&  <div className=\"text-center\">\n//                     <div className={`bg-gray-200 rounded-md p-4 mx-auto w-1/2 h-32 mb-16`}>\n//                         <p>Result: {disease}</p>\n//                     </div>\n//                 </div>}\n//             </form>\n//             </>\n//     );\n// }\n\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = \"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\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I'm ChatGPT! Ask me anything!\",\n    sentTime: \"just now\",\n    sender: \"ChatGPT\"\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const handleSendRequest = async message => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\"\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setIsTyping(true);\n    try {\n      var _response$choices$, _response$choices$$me;\n      const response = await processMessageToChatGPT([...messages, newMessage]);\n      const content = (_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 ? void 0 : (_response$choices$$me = _response$choices$.message) === null || _response$choices$$me === void 0 ? void 0 : _response$choices$$me.content;\n      if (content) {\n        const chatGPTResponse = {\n          message: content,\n          sender: \"ChatGPT\"\n        };\n        setMessages(prevMessages => [...prevMessages, chatGPTResponse]);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    const apiMessages = chatMessages.map(messageObject => {\n      const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return {\n        role,\n        content: messageObject.message\n      };\n    });\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [{\n        role: \"system\",\n        content: \"I'm a Student using ChatGPT for learning\"\n      }, ...apiMessages]\n    };\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    });\n    return response.json();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            scrollBehavior: \"smooth\",\n            typingIndicator: isTyping ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 43\n            }, this) : null,\n            children: messages.map((message, i) => {\n              console.log(message);\n              return /*#__PURE__*/_jsxDEV(Message, {\n                model: message\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Send a Message\",\n            onSend: handleSendRequest\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"/zB3XGTb3fH4sHZ1f5v72vHAi9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","useState","jsxDEV","_jsxDEV","API_KEY","App","_s","messages","setMessages","message","sentTime","sender","isTyping","setIsTyping","handleSendRequest","newMessage","direction","prevMessages","_response$choices$","_response$choices$$me","response","processMessageToChatGPT","content","choices","chatGPTResponse","error","console","chatMessages","apiMessages","map","messageObject","role","apiRequestBody","fetch","method","headers","body","JSON","stringify","json","className","children","style","position","height","width","scrollBehavior","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","log","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["/home/ambuj/projects/ml_healthcare/src/components/ServicePage.js"],"sourcesContent":["// import React, { useState,useEffect } from 'react';\n// import './App.css';\n// import '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\n// import {\n//   MainContainer,\n//   ChatContainer,\n//   MessageList,\n//   Message,\n//   MessageInput,\n//   TypingIndicator,\n// } from '@chatscope/chat-ui-kit-react';\n// // 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\n// const ServicePage = () => {\n//     const [messages, setMessages] = useState([\n//       {\n//         message: \"Hello, I'm your virtual doctor! Ask me anything!\",\n//         sentTime: \"just now\",\n//         sender: \"Your Virtual Doctor\",\n//       },\n//     ]);\n//   const [isTyping, setIsTyping] = useState(false);\n  \n//     const handleSendRequest = async (message) => {\n//       const newMessage = {\n//         message,\n//         direction: 'outgoing',\n//         sender: \"user\",\n//       };\n  \n//       setMessages((prevMessages) => [...prevMessages, newMessage]);\n//       setIsTyping(true);\n//       try {\n//         const response = await processMessageToChatGPT([...messages, newMessage]);\n//         const content = response.choices[0]?.message?.content;\n//         if (content) {\n//           const chatGPTResponse = {\n//             message: content,\n//             sender: \"Your Virtual Doctor\",\n//           };\n//           setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n//         }\n//       } catch (error) {\n//         console.error(\"Error processing message:\", error);\n//       } finally {\n//         setIsTyping(false);\n//       }\n//     };\n  \n//     async function processMessageToChatGPT(chatMessages) {\n//       const apiMessages = chatMessages.map((messageObject) => {\n//         const role = messageObject.sender === \"Your Virtual Doctor\" ? \"assistant\" : \"user\";\n//         return { role, content: messageObject.message };\n//       });\n  \n//       const apiRequestBody = {\n//         \"model\": \"gpt-3.5-turbo\",\n//         \"messages\": [\n//           { role: \"system\", content: \"I'm a Student using ChatGPT for my project which is based on healthcare\" },\n//           ...apiMessages,\n//         ],\n//       };\n  \n//       const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Authorization\": \"Bearer \" + \"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\",\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify(apiRequestBody),\n//       });\n  \n//       return response.json();\n//     }\n  \n//     return (\n//       <div className=\"ServicePage\">\n//         <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n//           <MainContainer>\n//             <ChatContainer>       \n//               <MessageList \n//                 scrollBehavior=\"smooth\" \n//                 typingIndicator={isTyping ? <TypingIndicator content=\"generating the feedback\" /> : null}\n//               >\n//                 {messages.map((message, i) => {\n//                   console.log(message)\n//                   return <Message key={i} model={message} />\n//                 })}\n//               </MessageList>\n//               <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n//             </ChatContainer>\n//           </MainContainer>\n//         </div>\n//       </div>\n//     )\n//   }\n// export default ServicePage;\n// const ServicePage = () => {\n\n//     const container = useRef(null)\n\n//     useEffect(() => {\n//         lottie.loadAnimation({\n//             container: container.current,\n//             renderer: 'svg',\n//             loop: true,\n//             autoplay: true,\n//             animationData: require('../assets/Checkup.json')\n//         })\n//     }, [])\n\n//     const [symptom, setSymptom] = useState('');\n//     const [disease, setDisease] = useState('');\n\n//     const handleInputChange = (e) => {\n//         setSymptom(e.target.value);\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         try {\n//             const response = await axios.post('http://localhost:5000/predict', {\n//                 symptom: symptom,\n//             });\n\n            \n//             setDisease(response.data.prediction);\n//         } catch (error) {\n//             console.error('Error:', error);\n//         }\n//     };\n\n    \n\n//     return (\n//         <>\n//             <section className={`${layout.section}  p-32 mt-16`}>\n//                 <div className={layout.sectionInfo}>\n//                     <h2 className={styles.heading2}>\n//                         Time for <br className=\"sm:block hidden\" />\n//                         <p className=\"flex-1 font-poppins font-semibold ss:text-[72px] text-[52px] text-custom ss:leading-[90px] leading-[70px]\">\n//                             Checkup!!\n//                         </p>\n//                     </h2>\n//                     <p className={`${styles.paragraph} max-w-[470px] mt-5 ml-2`}>\n//                         Picture a world where healthcare is a breeze. Our disease prediction website, bringing dreams to life, blends advanced tech with an easy-to-use interface. It lets you share symptoms effortlessly and offers accurate health insights.\n//                     </p>\n//                 </div>\n\n//             <div ref={container} className={`flex-1 flex ${styles.flexCenter} md:my-0 my-10 relative w-[400px] h-[400px]`}></div>\n\n//         </section>\n\n//             <form onSubmit={handleSubmit} className=\"pt-12 flex flex-col w-1/2 mx-auto\">\n//                 <input\n//                     placeholder=\"Enter the symptoms\"\n//                     type=\"text\"\n//                     value={symptom}\n//                     onChange={handleInputChange}\n//                     className=\"h-12 px-4 mb-8 rounded-md border border-gray-600\"\n//                 />\n\n//                 <button\n//                     type=\"submit\"\n//                     className=\"mb-8 bg-black-500 text-black py-2 px-4 rounded-md shadow-md hover:bg-black-600 focus:outline-none focus:ring-2 focus:ring-black-500\"\n//                 >\n//                     Submit\n//                 </button>\n//             {disease &&  <div className=\"text-center\">\n//                     <div className={`bg-gray-200 rounded-md p-4 mx-auto w-1/2 h-32 mb-16`}>\n//                         <p>Result: {disease}</p>\n//                     </div>\n//                 </div>}\n//             </form>\n//             </>\n//     );\n// }\n\n\n\nimport {\n    ChatContainer,\n    MainContainer,\n    Message,\n    MessageInput,\n    MessageList,\n    TypingIndicator,\n} from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { useState } from 'react';\nimport './App.css';\n\nconst API_KEY =\"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\"\n\nconst App = () => {\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I'm ChatGPT! Ask me anything!\",\n      sentTime: \"just now\",\n      sender: \"ChatGPT\",\n    },\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const handleSendRequest = async (message) => {\n    const newMessage = {\n      message,\n      direction: 'outgoing',\n      sender: \"user\",\n    };\n\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    setIsTyping(true);\n\n    try {\n      const response = await processMessageToChatGPT([...messages, newMessage]);\n      const content = response.choices[0]?.message?.content;\n      if (content) {\n        const chatGPTResponse = {\n          message: content,\n          sender: \"ChatGPT\",\n        };\n        setMessages((prevMessages) => [...prevMessages, chatGPTResponse]);\n      }\n    } catch (error) {\n      console.error(\"Error processing message:\", error);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    const apiMessages = chatMessages.map((messageObject) => {\n      const role = messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\";\n      return { role, content: messageObject.message };\n    });\n\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [\n        { role: \"system\", content: \"I'm a Student using ChatGPT for learning\" },\n        ...apiMessages,\n      ],\n    };\n\n    const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(apiRequestBody),\n    });\n\n    return response.json();\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ position:\"relative\", height: \"800px\", width: \"700px\"  }}>\n        <MainContainer>\n          <ChatContainer>       \n            <MessageList \n              scrollBehavior=\"smooth\" \n              typingIndicator={isTyping ? <TypingIndicator content=\"ChatGPT is typing\" /> : null}\n            >\n              {messages.map((message, i) => {\n                console.log(message)\n                return <Message key={i} model={message} />\n              })}\n            </MessageList>\n            <MessageInput placeholder=\"Send a Message\" onSend={handleSendRequest} />        \n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SACIA,aAAa,EACbC,aAAa,EACbC,OAAO,EACPC,YAAY,EACZC,WAAW,EACXC,eAAe,QACZ,8BAA8B;AACrC,OAAO,2DAA2D;AAClE,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,OAAO,GAAE,qDAAqD;AAEpE,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CACvC;IACEQ,OAAO,EAAE,sCAAsC;IAC/CC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE;EACV,CAAC,CACF,CAAC;EACF,MAAM,CAACC,Q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"},"metadata":{},"sourceType":"module","externalDependencies":[]}